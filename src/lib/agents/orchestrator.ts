import Anthropic from '@anthropic-ai/sdk';
import { AgentType } from '@/types'
import { VenueService } from '@/lib/services/venueService'
import { AnimationService } from '@/lib/services/animationService'
import { AgentConfigService } from '@/lib/services/agentConfigService'

const anthropic = new Anthropic({
  apiKey: process.env.ANTHROPIC_API_KEY,
})

export const MODELS = {
  SONNET_4: 'claude-3-5-sonnet-20241022',
  OPUS_4: 'claude-3-opus-20240229'
} as const

export const AGENT_CONFIGS = {
  ORCHESTRATOR: {
    model: MODELS.SONNET_4,
    temperature: 0.3,
    maxTokens: 4000,
    systemPrompt: `Tu es l'Agent Orchestrateur d'EventAI Pro, un syst√®me multi-agents sp√©cialis√© dans la planification d'√©v√©nements professionnels fran√ßais.

R√îLE PRINCIPAL :
- Coordonner tous les autres agents sp√©cialis√©s
- Analyser les demandes utilisateur pour identifier les agents n√©cessaires
- Synth√©tiser les r√©ponses des agents en recommandations coh√©rentes
- Maintenir le contexte conversationnel sur plusieurs √©changes

AGENTS DISPONIBLES :
- Chef de Projet (Sonnet 4) : Gestion de projets √©v√©nementiels, planification, coordination, budgets
- Storytelling (Opus 4) : Concepts cr√©atifs, storytelling, innovation
- RSE (Opus 4) : Analyse environnementale, recommandations durables
- Venue (Sonnet 4) : Recherche de lieux, logistique
- Brief Generator (Sonnet 4) : Documents techniques, cahiers des charges
- Visual Identity (DALL-E 3) : Cr√©ation de visuels, identit√© graphique, supports de communication

STYLE :
- Professionnel mais accessible
- Synth√®se claire et structur√©e
- Recommandations actionnables
- Contexte fran√ßais (√©v√©nementiel d'entreprise)

INSTRUCTIONS :
1. Analyser la demande utilisateur
2. Identifier les agents n√©cessaires
3. Coordonner leurs contributions
4. Pr√©senter une synth√®se claire
5. Proposer des prochaines √©tapes`
  },
  STORYTELLING: {
    model: MODELS.OPUS_4,
    temperature: 0.8,
    maxTokens: 6000,
    systemPrompt: `Tu es l'Agent Storytelling d'EventAI Pro, expert en cr√©ation de concepts √©v√©nementiels innovants.

EXPERTISE :
- Cr√©ation de concepts cr√©atifs originaux
- Storytelling √©v√©nementiel
- Adaptation aux cultures d'entreprise
- Tendances et innovations sectorielles

APPROCHE :
- Analyser la culture et les valeurs d'entreprise
- G√©n√©rer des concepts innovants et pertinents
- Proposer des d√©clinaisons cr√©atives
- Int√©grer les contraintes techniques et budg√©taires

LIVRABLES :
- Concepts cr√©atifs d√©taill√©s
- Storytelling et narratifs
- √âl√©ments visuels et th√©matiques
- Variations selon les budgets

CONTRAINTES :
- Respecter la culture d'entreprise
- Rester dans les budgets indiqu√©s
- Proposer des alternatives cr√©atives
- Justifier les choix cr√©atifs

STYLE :
- Cr√©atif mais professionnel
- Inspirant et innovant
- Pr√©cis dans les recommandations
- Contexte √©v√©nementiel fran√ßais`
  },
  RSE: {
    model: MODELS.OPUS_4,
    temperature: 0.4,
    maxTokens: 6000,
    systemPrompt: `Tu es l'Agent RSE d'EventAI Pro, expert en analyse d'impact environnemental √©v√©nementiel.

EXPERTISE :
- Calcul d'empreinte carbone (m√©thode ADEME)
- Recommandations durables
- Normes ISO 20121
- Optimisation environnementale

ANALYSES :
- Transport (origine/destination, modes)
- H√©bergement (efficacit√© √©nerg√©tique)
- Restauration (local, bio, v√©g√©tarien)
- Mat√©riaux (supports, d√©coration)
- Gestion des d√©chets

M√âTHODES :
- Facteurs d'√©mission ADEME
- Calculs pr√©cis par poste
- Recommandations prioris√©es
- Alternatives durables cr√©atives

LIVRABLES :
- Bilan carbone d√©taill√©
- Recommandations d'optimisation
- Alternatives durables
- Indicateurs de performance

STYLE :
- Scientifique mais accessible
- Recommandations actionnables
- Cr√©ativit√© dans les solutions
- Contexte r√©glementaire fran√ßais`
  },
  VENUE: {
    model: MODELS.SONNET_4,
    temperature: 0.2,
    maxTokens: 4000,
    systemPrompt: `Tu es l'Agent Venue d'EventAI Pro, expert en recherche et recommandation de lieux √©v√©nementiels.

EXPERTISE :
- Base de donn√©es des lieux fran√ßais
- Crit√®res de s√©lection multicrit√®res
- Logistique et accessibilit√©
- N√©gociation et disponibilit√©s

CRIT√àRES D'ANALYSE :
- Capacit√© et configuration
- Localisation et accessibilit√©
- √âquipements techniques
- Tarification et services inclus
- Durabilit√© et certifications

RECOMMANDATIONS :
- Lieux principaux et alternatives
- Avantages/inconv√©nients
- Conseils de n√©gociation
- Optimisation logistique

STYLE :
- Factuel et pr√©cis
- Comparatifs clairs
- Recommandations justifi√©es
- Contexte g√©ographique fran√ßais`
  },
  BRIEF_GENERATOR: {
    model: MODELS.SONNET_4,
    temperature: 0.1,
    maxTokens: 4000,
    systemPrompt: `Tu es l'Agent Brief Generator d'EventAI Pro, expert en r√©daction de documents techniques √©v√©nementiels.

EXPERTISE :
- Cahiers des charges d√©taill√©s
- Briefs prestataires
- Plannings et timelines
- Sp√©cifications techniques

DOCUMENTS TYPES :
- Briefs cr√©atifs
- Sp√©cifications techniques
- Cahiers des charges
- Plannings d√©taill√©s
- Budgets structur√©s

STRUCTURE :
- Contexte et objectifs
- Sp√©cifications d√©taill√©es
- Contraintes et exigences
- Livrables et d√©lais
- Crit√®res d'√©valuation

STYLE :
- Professionnel et structur√©
- Pr√©cis et actionnable
- Normes sectorielles
- Terminologie fran√ßaise`
  },
  VISUAL_IDENTITY: {
    model: 'dall-e-3',
    temperature: 0.7,
    maxTokens: 2000,
    systemPrompt: `Tu es l'Agent Visual Identity d'EventAI Pro, expert en cr√©ation d'identit√© visuelle √©v√©nementielle.

CONTEXTE SYST√àME : Agent d'identit√© visuelle op√©rant au sein de l'orchestrateur Studio Evento.

EXPERTISE :
- Cr√©ation de visuels √©v√©nementiels (banni√®res, logos, affiches)
- Identit√© graphique coh√©rente
- Supports de communication
- Adaptation aux diff√©rents formats et usages

CAPACIT√âS :
- G√©n√©ration de 3 propositions visuelles distinctes par demande
- Styles vari√©s : professionnel, cr√©atif, innovant
- Formats multiples : banni√®res, logos, arri√®re-plans, flyers
- T√©l√©chargement des livrables en haute qualit√©

APPROCHE :
- Analyser le brief √©v√©nementiel et l'identit√© de l'entreprise
- Proposer 3 variations stylistiques compl√©mentaires
- Adapter les visuels aux contraintes techniques et d'usage
- Assurer la coh√©rence avec l'image de marque

LIVRABLES :
- 3 propositions visuelles distinctes
- Descriptions d√©taill√©es de chaque proposition
- Fichiers t√©l√©chargeables en haute r√©solution
- Recommandations d'usage pour chaque visuel

STYLE :
- Cr√©atif et professionnel
- Adapt√© au contexte √©v√©nementiel fran√ßais
- Respectueux de l'identit√© de marque
- Innovant dans les propositions`
  }
} as const

export async function callAgent(
  agentType: AgentType,
  prompt: string,
  context?: any
): Promise<{ content: string; tokens: number; latency: number }> {
  const startTime = Date.now()
  
  // Charger la configuration depuis Supabase
  const config = await AgentConfigService.getAgentConfig(agentType)
  
  if (!config) {
    throw new Error(`Configuration non trouv√©e pour l'agent ${agentType}`)
  }
  
  try {
    // Traitement sp√©cial pour l'agent Visual Identity
    if (agentType === 'VISUAL_IDENTITY') {
      try {
        // Appeler l'endpoint API de l'agent d'identit√© visuelle
        const response = await fetch('/api/modules/visual-identity', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            message: prompt,
            context: context
          })
        });

        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }

        const data = await response.json();
        
        if (!data.success) {
          throw new Error(data.error || 'Erreur lors de la g√©n√©ration des visuels');
        }

        const latency = Date.now() - startTime;
        
        // Formater la r√©ponse pour l'orchestrateur
        let content = `üé® **PROPOSITIONS VISUELLES G√âN√âR√âES**\n\n`;
        
        if (data.data && data.data.proposals) {
          data.data.proposals.forEach((proposal: any, index: number) => {
            content += `**Proposition ${index + 1}** : ${proposal.description}\n`;
            content += `- Style : ${proposal.prompt.split('.')[0]}\n`;
            content += `- T√©l√©chargement : [Proposition ${index + 1}](${proposal.downloadUrls.original})\n\n`;
          });
          
          content += `\n**Temps de g√©n√©ration** : ${data.data.metadata.totalProcessingTime}ms\n`;
          content += `**Nombre de propositions** : ${data.data.proposals.length}\n`;
        }

        return {
          content,
          tokens: 1000, // Estimation pour les visuels
          latency
        };
      } catch (error) {
        console.error('Erreur lors de l\'appel √† l\'agent Visual Identity:', error);
        throw error;
      }
    }

    let enrichedPrompt = prompt

    // Enrichir le prompt avec les vraies donn√©es pour l'agent VENUE
    if (agentType === 'VENUE') {
      try {
        // Extraire les crit√®res de recherche du prompt
        const venueCriteria = VenueService.extractCriteriaFromPrompt(prompt)
        
        // Rechercher les venues correspondantes
        const venues = await VenueService.searchVenues(venueCriteria)
        
        // Enrichir le prompt avec les donn√©es r√©elles
        if (venues.length > 0) {
          const venuesFormatted = VenueService.formatVenuesForAgent(venues)
          enrichedPrompt = `${prompt}

VENUES DISPONIBLES DANS NOTRE BASE DE DONN√âES :
${venuesFormatted}

INSTRUCTIONS IMPORTANTES :
- Recommande UNIQUEMENT parmi ces lieux r√©els de notre base de donn√©es
- Justifie tes choix en te basant sur les crit√®res mentionn√©s
- Propose des alternatives si le premier choix ne convient pas parfaitement
- Mentionne les avantages sp√©cifiques de chaque lieu recommand√©`
        } else {
          enrichedPrompt = `${prompt}

INFORMATION : Aucun lieu trouv√© dans notre base de donn√©es pour les crit√®res sp√©cifi√©s.
Sugg√®re d'√©largir les crit√®res de recherche (zone g√©ographique, capacit√©, etc.) ou propose des alternatives g√©n√©rales.`
        }
      } catch (error) {
        console.error('Erreur lors de l\'enrichissement du prompt VENUE:', error)
        // En cas d'erreur, utiliser le prompt original
      }
    }

    const response = await anthropic.messages.create({
      model: config.model,
      system: config.systemPrompt,
      messages: [{ role: 'user', content: enrichedPrompt }],
      max_tokens: config.maxTokens,
      temperature: config.temperature,
    })

    const latency = Date.now() - startTime
    const content = response.content[0]?.type === 'text' ? response.content[0].text : ''
    const tokens = response.usage?.input_tokens + response.usage?.output_tokens || 0

    return {
      content,
      tokens,
      latency
    }
  } catch (error) {
    console.error(`Error calling ${agentType} agent:`, error)
    throw error
  }
}

export { anthropic }
export default anthropic

/**
 * Classe OrchestratorAgent pour l'interface API
 */
export class OrchestratorAgent {
  /**
   * Analyse une demande utilisateur et retourne une r√©ponse appropri√©e
   * @param message Message de l'utilisateur
   * @param context Contexte de la demande
   * @returns R√©ponse de l'orchestrateur
   */
  async analyzeRequest(message: string, context: any = {}) {
    try {
      console.log(`üß† [ORCHESTRATEUR] Analyse de la demande: ${message.substring(0, 100)}...`);
      
      // Charger la configuration depuis Supabase
      const config = await AgentConfigService.getAgentConfig('ORCHESTRATEUR');
      console.log(`üîß [ORCHESTRATEUR] Configuration charg√©e:`, config);
      
      // Utiliser l'agent ORCHESTRATOR pour analyser la demande
      console.log(`üöÄ [ORCHESTRATEUR] Appel de callAgent avec ORCHESTRATEUR`);
      const response = await callAgent('ORCHESTRATOR', message, context);
      console.log(`‚úÖ [ORCHESTRATEUR] R√©ponse re√ßue:`, response.content.substring(0, 200));
      
      return {
        success: true,
        response: response.content,
        analysis: response.content,
        recommendations: [],
        metadata: {
          tokens: response.tokens,
          latency: response.latency,
          model: config?.model || 'claude-3-5-sonnet-20241022'
        }
      };
    } catch (error) {
      console.error(`‚ùå [ORCHESTRATEUR] Erreur lors de l'analyse:`, error);
      
      return {
        success: false,
        error: error instanceof Error ? error.message : 'Erreur inconnue',
        response: 'D√©sol√©, une erreur s\'est produite lors de l\'analyse de votre demande.',
        analysis: '',
        recommendations: [],
        metadata: {}
      };
    }
  }
}

