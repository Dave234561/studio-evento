import type { 
  VisualRequest, 
  VisualResponse, 
  VisualProposal,
  VisualIdentityConfig, 
  DownloadOptions 
} from '../../types/visual-identity';

/**
 * Agent d'identit√© visuelle pour Studio Evento utilisant l'outil Manus
 * G√©n√®re 3 propositions visuelles coh√©rentes pour les √©v√©nements
 */
export class VisualIdentityManusAgent {
  private config: VisualIdentityConfig;

  constructor() {
    // Configuration par d√©faut
    this.config = {
      model: "manus-image-generator",
      defaultStyle: "moderne et professionnel",
      defaultColors: ["#4285F4", "#34A853", "#FBBC05", "#EA4335"],
      defaultDimensions: {
        "banni√®re": { width: 1200, height: 628 },
        "logo": { width: 512, height: 512 },
        "affiche": { width: 800, height: 1200 },
        "arri√®re-plan": { width: 1920, height: 1080 }
      },
      supportedFormats: ["png", "jpg"],
      maxProposals: 3
    };
  }

  /**
   * G√©n√®re 3 propositions visuelles pour un √©v√©nement
   * @param request Demande de g√©n√©ration visuelle
   * @returns R√©ponse avec 3 propositions
   */
  async generateVisualProposals(request: VisualRequest): Promise<VisualResponse> {
    const startTime = Date.now();
    const requestId = `visual_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
    
    console.log(`üé® [VISUAL-MANUS] Starting visual generation for request: ${requestId}`);
    
    try {
      // Adapter la demande pour optimiser la g√©n√©ration
      const adaptedRequest = this.adaptRequest(request);
      
      // G√©n√©rer les 3 propositions en parall√®le
      const proposalPromises = [
        this.generateProposalWithManus(adaptedRequest, 1, requestId),
        this.generateProposalWithManus(adaptedRequest, 2, requestId),
        this.generateProposalWithManus(adaptedRequest, 3, requestId)
      ];
      
      const proposals = await Promise.all(proposalPromises);
      const totalProcessingTime = Date.now() - startTime;
      
      console.log(`‚úÖ [VISUAL-MANUS] Generated ${proposals.length} proposals in ${totalProcessingTime}ms`);
      
      return {
        success: true,
        proposals: proposals,
        metadata: {
          totalProcessingTime: totalProcessingTime,
          requestId: requestId,
          timestamp: new Date().toISOString(),
          model: this.config.model,
          version: "1.0.0"
        }
      };
    } catch (error) {
      console.error(`‚ùå [VISUAL-MANUS] Error generating proposals:`, error);
      
      return {
        success: false,
        proposals: [],
        metadata: {
          totalProcessingTime: Date.now() - startTime,
          requestId: requestId,
          timestamp: new Date().toISOString(),
          model: this.config.model,
          version: "1.0.0",
          error: error instanceof Error ? error.message : 'Erreur inconnue'
        }
      };
    }
  }

  /**
   * G√©n√®re une proposition visuelle avec l'outil Manus
   * @param request Demande adapt√©e
   * @param proposalNumber Num√©ro de la proposition (1, 2, ou 3)
   * @param requestId ID de la requ√™te
   * @returns Proposition visuelle
   */
  private async generateProposalWithManus(
    request: VisualRequest, 
    proposalNumber: number, 
    requestId: string
  ): Promise<VisualProposal> {
    const proposalStartTime = Date.now();
    
    try {
      // Construire le prompt selon le style de la proposition
      const prompt = this.buildPromptForProposal(request, proposalNumber);
      
      // D√©terminer les dimensions
      const dimensions = this.config.defaultDimensions[request.visualType || "banni√®re"] || 
                        this.config.defaultDimensions["banni√®re"];
      
      // G√©n√©rer l'image avec l'outil Manus (simulation)
      // Dans un vrai environnement, ceci ferait appel √† l'outil media_generate_image
      const imageUrl = await this.simulateManusImageGeneration(prompt, dimensions, proposalNumber);
      
      const proposalId = `${requestId}_proposal_${proposalNumber}`;
      const processingTime = Date.now() - proposalStartTime;
      
      return {
        id: proposalId,
        imageUrl: imageUrl,
        prompt: prompt,
        description: this.getProposalDescription(proposalNumber, request),
        metadata: {
          model: this.config.model,
          processingTime: processingTime,
          dimensions: dimensions,
          format: "png",
          parameters: {
            style: this.getStyleForProposal(proposalNumber),
            quality: "high",
            proposalNumber: proposalNumber
          }
        },
        downloadUrls: {
          original: `/api/download?file=${proposalId}.png`,
          thumbnail: `/api/download?file=${proposalId}_thumb.png`
        }
      };
    } catch (error) {
      console.error(`‚ùå [VISUAL-MANUS] Error generating proposal ${proposalNumber}:`, error);
      
      return {
        id: `${requestId}_proposal_${proposalNumber}_error`,
        imageUrl: "",
        prompt: this.buildPromptForProposal(request, proposalNumber),
        description: `Erreur lors de la g√©n√©ration de la proposition ${proposalNumber}`,
        metadata: {
          model: this.config.model,
          processingTime: Date.now() - proposalStartTime,
          dimensions: this.config.defaultDimensions[request.visualType || "banni√®re"] || 
                     this.config.defaultDimensions["banni√®re"],
          format: "png",
          parameters: {
            error: error instanceof Error ? error.message : 'Erreur inconnue'
          }
        },
        downloadUrls: {
          original: "",
          thumbnail: ""
        }
      };
    }
  }

  /**
   * Simule la g√©n√©ration d'image avec l'outil Manus
   * @param prompt Prompt de g√©n√©ration
   * @param dimensions Dimensions de l'image
   * @param proposalNumber Num√©ro de la proposition
   * @returns URL de l'image g√©n√©r√©e
   */
  private async simulateManusImageGeneration(
    prompt: string, 
    dimensions: { width: number; height: number }, 
    proposalNumber: number
  ): Promise<string> {
    // Simulation - dans un vrai environnement, ceci utiliserait l'outil media_generate_image
    // Pour la d√©monstration, on retourne les images d√©j√† g√©n√©r√©es
    const demoImages = [
      "/demo-visual-1.png",
      "/demo-visual-2.png", 
      "/demo-visual-3.png"
    ];
    
    return demoImages[proposalNumber - 1] || "/demo-visual-1.png";
  }

  /**
   * Adapte la demande pour optimiser la g√©n√©ration
   * @param request Demande originale
   * @returns Demande adapt√©e
   */
  private adaptRequest(request: VisualRequest): VisualRequest {
    return {
      ...request,
      visualType: request.visualType || "banni√®re",
      style: request.style || this.config.defaultStyle,
      colors: request.colors && request.colors.length > 0 ? 
              request.colors : this.config.defaultColors,
      organization: request.organization || "Votre organisation",
      eventType: request.eventType || "√©v√©nement"
    };
  }

  /**
   * Construit le prompt pour une proposition sp√©cifique
   * @param request Demande adapt√©e
   * @param proposalNumber Num√©ro de la proposition
   * @returns Prompt optimis√©
   */
  private buildPromptForProposal(request: VisualRequest, proposalNumber: number): string {
    const baseContext = `CONTEXTE SYST√àME : Agent d'identit√© visuelle op√©rant au sein de l'orchestrateur Studio Evento.`;
    
    const task = `T√ÇCHE : Cr√©er un visuel ${this.getStyleForProposal(proposalNumber)} pour ${request.eventType} pour ${request.organization}${request.location ? ` √† ${request.location}` : ''}`;
    
    const visualType = `TYPE DE VISUEL : ${this.getVisualTypeDescription(request.visualType || "banni√®re")}. Format optimis√© pour la communication digitale.`;
    
    const colors = `PALETTE DE COULEURS : Utilisez principalement ${request.colors?.slice(0, 2).join(', ')}.`;
    
    const approach = `APPROCHE SP√âCIFIQUE (Proposition ${proposalNumber}) : ${this.getApproachForProposal(proposalNumber)}`;
    
    const quality = `CONSIGNES QUALIT√â :
- Cr√©er une image de haute qualit√© professionnelle
- Composition √©quilibr√©e et harmonieuse
- Typographie lisible et appropri√©e au contexte
- Respecter strictement la palette de couleurs
- Optimiser pour l'usage ${request.visualType}
- Style coh√©rent avec l'identit√© de l'√©v√©nement`;

    return [baseContext, task, visualType, colors, approach, quality].join('\n\n');
  }

  /**
   * Retourne le style pour une proposition donn√©e
   * @param proposalNumber Num√©ro de la proposition
   * @returns Style de la proposition
   */
  private getStyleForProposal(proposalNumber: number): string {
    const styles = [
      "technologique et moderne avec une approche classique et professionnelle",
      "cr√©atif et dynamique avec des √©l√©ments modernes", 
      "avant-gardiste et innovant"
    ];
    return styles[proposalNumber - 1] || styles[0];
  }

  /**
   * Retourne l'approche pour une proposition donn√©e
   * @param proposalNumber Num√©ro de la proposition
   * @returns Approche de la proposition
   */
  private getApproachForProposal(proposalNumber: number): string {
    const approaches = [
      "Cette proposition doit √™tre professionnelle et accessible, adapt√©e √† un public large. Privil√©giez la clart√© et la lisibilit√©.",
      "Cette proposition doit √™tre cr√©ative et dynamique, avec une approche plus moderne et originale. Osez les compositions asym√©triques et les effets visuels.",
      "Cette proposition doit √™tre audacieuse et innovante, avec une approche distinctive qui se d√©marque. Explorez des concepts avant-gardistes."
    ];
    return approaches[proposalNumber - 1] || approaches[0];
  }

  /**
   * Retourne la description d'une proposition
   * @param proposalNumber Num√©ro de la proposition
   * @param request Demande adapt√©e
   * @returns Description de la proposition
   */
  private getProposalDescription(proposalNumber: number, request: VisualRequest): string {
    const descriptions = [
      `Proposition professionnelle et accessible pour ${request.eventType}, avec un design moderne et √©pur√© qui privil√©gie la clart√© et la lisibilit√©.`,
      `Proposition cr√©ative et dynamique pour ${request.eventType}, avec des √©l√©ments visuels modernes et une composition asym√©trique innovante.`,
      `Proposition avant-gardiste et audacieuse pour ${request.eventType}, avec un design distinctif qui se d√©marque par son approche innovante.`
    ];
    return descriptions[proposalNumber - 1] || descriptions[0];
  }

  /**
   * Retourne la description du type de visuel
   * @param visualType Type de visuel
   * @returns Description du type
   */
  private getVisualTypeDescription(visualType: string): string {
    const descriptions: { [key: string]: string } = {
      "banni√®re": "Banni√®re pour les r√©seaux sociaux et le site web",
      "logo": "Logo √©v√©nementiel temporaire",
      "affiche": "Affiche promotionnelle pour impression",
      "arri√®re-plan": "Arri√®re-plan pour pr√©sentations et supports digitaux"
    };
    return descriptions[visualType] || descriptions["banni√®re"];
  }
}

// Instance singleton de l'agent
export const visualIdentityManusAgent = new VisualIdentityManusAgent();

