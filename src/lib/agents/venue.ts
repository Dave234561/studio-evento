import { generateText } from 'ai'
import { createAnthropic } from '@ai-sdk/anthropic'
import { VenueService } from '../services/venueService'

const anthropic = createAnthropic({
  apiKey: process.env.ANTHROPIC_API_KEY || 'placeholder'
})

export interface VenueRequest {
  message: string
  context?: {
    sessionId?: string
    module?: string
    userMessage?: string
    eventType?: string
    participants?: number
    budget?: string
    location?: string
    duration?: string
    objectives?: string[]
    date?: string
    requirements?: string[]
    accessibility?: boolean
    parking?: boolean
    catering?: boolean
  }
}

export interface VenueResponse {
  recommendations: Array<{
    nom: string
    capacite: string
    localite: string
    code_postal?: string
    score: number
    advantages: string[]
    considerations: string[]
  }>
  analysis: string
  searchCriteria: {
    capacity: number
    location: string
    eventType: string
    budget: number
  }
  alternatives: string[]
}

export class VenueAgent {
  async processRequest(request: VenueRequest): Promise<VenueResponse> {
    try {
      console.log('üè¢ [VENUE] D√©but traitement:', request.message)
      
      // Extraire les crit√®res de recherche du message
      console.log('üè¢ [VENUE] Extraction crit√®res...')
      const criteria = this.extractSearchCriteria(request.message, request.context)
      console.log('üè¢ [VENUE] Crit√®res extraits:', criteria)
      
      // Rechercher les lieux correspondants
      console.log('üè¢ [VENUE] Recherche venues...')
      const venues = await VenueService.searchVenues(criteria)
      console.log('üè¢ [VENUE] Venues trouv√©es:', venues?.length || 0)
      
      // Construire le prompt avec les nouvelles variables dynamiques
      console.log('üè¢ [VENUE] Construction prompt...')
      const enrichedPrompt = this.buildDetailedPrompt(request.message, criteria, venues, undefined)
      console.log('üè¢ [VENUE] Prompt construit, longueur:', enrichedPrompt?.length || 0)
      
      // G√©n√©rer la r√©ponse avec Claude
      console.log('üè¢ [VENUE] Appel Claude...')
      const response = await generateText({
        model: anthropic('claude-3-5-sonnet-20241022'),
        prompt: enrichedPrompt,
        maxTokens: 3000,
        temperature: 0.7
      })
      console.log('üè¢ [VENUE] R√©ponse Claude re√ßue:', response.text?.length || 0, 'caract√®res')

      console.log('üè¢ [VENUE] Parsing r√©ponse...')
      return this.parseResponse(response.text, venues, criteria)
    } catch (error) {
      console.error('üè¢ [VENUE] Erreur d√©taill√©e:', error)
      console.error('üè¢ [VENUE] Stack trace:', error instanceof Error ? error.stack : 'No stack trace')
      throw new Error('Erreur lors de la recherche de lieux')
    }
  }

  private extractSearchCriteria(message: string, context?: any) {
    const criteria: any = {}
    
    // Extraire le type d'√©v√©nement
    const eventTypes = [
      { pattern: /s√©minaire|formation|conf√©rence/i, type: 'S√©minaire/Formation' },
      { pattern: /mariage|anniversaire|f√™te/i, type: '√âv√©nement priv√©' },
      { pattern: /cocktail|ap√©ritif|r√©ception/i, type: 'Cocktail/R√©ception' },
      { pattern: /gala|soir√©e|d√Æner/i, type: 'Gala/Soir√©e' },
      { pattern: /salon|exposition|foire/i, type: 'Salon/Exposition' },
      { pattern: /lancement|inauguration/i, type: 'Lancement produit' },
      { pattern: /team.?building|coh√©sion/i, type: 'Team Building' },
      { pattern: /assembl√©e|r√©union/i, type: 'Assembl√©e/R√©union' }
    ]

    for (const { pattern, type } of eventTypes) {
      if (pattern.test(message)) {
        criteria.type_evenement = type
        break
      }
    }

    // Extraire les dates/dur√©e
    const dateMatch = message.match(/(\d{1,2}\/\d{1,2}\/\d{4}|\d{1,2}\s+(?:janvier|f√©vrier|mars|avril|mai|juin|juillet|ao√ªt|septembre|octobre|novembre|d√©cembre))/i)
    if (dateMatch) {
      criteria.dates = dateMatch[0]
    }
    
    const dureeMatch = message.match(/(\d+)\s*(?:jours?|heures?|h)/i)
    if (dureeMatch) {
      criteria.dates = criteria.dates ? `${criteria.dates} (${dureeMatch[0]})` : dureeMatch[0]
    }

    // Extraire le nombre de participants
    const participantsMatch = message.match(/(\d+)\s*(?:personnes?|participants?|pax|places?|invit√©s?)/i)
    if (participantsMatch) {
      criteria.nb_participants = parseInt(participantsMatch[1])
    }

    // Extraire le lieu/destination recherch√©e
    const locationPatterns = [
      /(?:√†|dans|sur|vers)\s+([A-Za-z√Ä-√ø\s-]+?)(?:\s+pour|\s+avec|\s*$|,)/i,
      /r√©gion\s+([A-Za-z√Ä-√ø\s-]+)/i,
      /proche\s+de\s+([A-Za-z√Ä-√ø\s-]+)/i
    ]
    
    for (const pattern of locationPatterns) {
      const match = message.match(pattern)
      if (match) {
        criteria.lieu_recherche = match[1].trim()
        break
      }
    }

    // Extraire le profil des participants
    if (message.match(/cadres?|dirigeants?|managers?|direction/i)) {
      criteria.profil_participants = 'Cadres/Dirigeants'
    } else if (message.match(/√©quipes?|collaborateurs?|salari√©s?|employ√©s?/i)) {
      criteria.profil_participants = '√âquipes/Collaborateurs'
    } else if (message.match(/clients?|prospects?|partenaires?/i)) {
      criteria.profil_participants = 'Clients/Partenaires'
    } else if (message.match(/famille|amis|proches/i)) {
      criteria.profil_participants = 'Famille/Amis'
    }

    // Extraire le budget
    const budgetMatch = message.match(/(\d+(?:\s*\d{3})*)\s*(?:‚Ç¨|euros?)/i)
    if (budgetMatch) {
      criteria.budget = budgetMatch[1].replace(/\s/g, '') + '‚Ç¨'
    }

    // Extraire le format de salle
    if (message.match(/th√©√¢tre|auditorium|amphith√©√¢tre/i)) {
      criteria.format_salle = 'Th√©√¢tre/Auditorium'
    } else if (message.match(/classe|√©cole|formation/i)) {
      criteria.format_salle = 'Classe/Formation'
    } else if (message.match(/cocktail|debout|r√©ception/i)) {
      criteria.format_salle = 'Cocktail/Debout'
    } else if (message.match(/banquet|d√Æner|assis/i)) {
      criteria.format_salle = 'Banquet/D√Æner'
    } else if (message.match(/u|fer √† cheval/i)) {
      criteria.format_salle = 'En U'
    }

    // Extraire les besoins techniques
    const besoinstech = []
    if (message.match(/vid√©oprojecteur|projecteur|√©cran/i)) {
      besoinstech.push('Vid√©oprojecteur/√âcran')
    }
    if (message.match(/sonorisation|micro|audio/i)) {
      besoinstech.push('Sonorisation')
    }
    if (message.match(/wifi|internet|connexion/i)) {
      besoinstech.push('WiFi/Internet')
    }
    if (message.match(/√©clairage|lumi√®re/i)) {
      besoinstech.push('√âclairage')
    }
    criteria.besoins_techniques = besoinstech.join(', ') || 'Standard'

    // Extraire l'accessibilit√©
    if (message.match(/transport|gare|a√©roport|m√©tro/i)) {
      criteria.accessibilite = 'Transports en commun requis'
    } else if (message.match(/parking|voiture|stationnement/i)) {
      criteria.accessibilite = 'Parking requis'
    } else if (message.match(/h√©bergement|h√¥tel|logement/i)) {
      criteria.accessibilite = 'H√©bergement √† proximit√©'
    }

    // Extraire les contraintes
    const contraintes = []
    if (message.match(/accessible|handicap|pmr/i)) {
      contraintes.push('Accessibilit√© PMR')
    }
    if (message.match(/climatisation|climatis√©/i)) {
      contraintes.push('Climatisation')
    }
    if (message.match(/ext√©rieur|terrasse|jardin/i)) {
      contraintes.push('Espace ext√©rieur')
    }
    if (message.match(/cuisine|traiteur|restauration/i)) {
      contraintes.push('Possibilit√© restauration')
    }
    criteria.contraintes = contraintes.join(', ') || 'Aucune contrainte sp√©cifique'

    // Extraire les activit√©s
    if (message.match(/team.?building|activit√©s|animations/i)) {
      criteria.activites = 'Team building et animations'
    } else if (message.match(/visite|d√©couverte|tourisme/i)) {
      criteria.activites = 'Visites et d√©couvertes'
    } else if (message.match(/sport|golf|tennis/i)) {
      criteria.activites = 'Activit√©s sportives'
    }

    // Ajouter le contexte si fourni
    if (context) {
      if (context.participants) criteria.nb_participants = context.participants
      if (context.eventType) criteria.type_evenement = context.eventType
      if (context.budget) criteria.budget = context.budget
      if (context.location) criteria.lieu_recherche = context.location
      if (context.duration) criteria.dates = context.duration
      if (context.date) criteria.dates = context.date
      if (context.requirements) criteria.besoins_techniques = context.requirements.join(', ')
    }

    return criteria
  }

  private buildDetailedPrompt(originalMessage: string, criteria: any, venues: any[] = [], webEnrichment?: any): string {
    const venuesText = venues.length > 0 
      ? venues.slice(0, 10).map(v => 
          `- ${v.nom} (${v.localite}): Capacit√© ${v.capacite} personnes${v.code_postal ? ` - ${v.code_postal}` : ''}${v.description ? ` - ${v.description}` : ''}`
        ).join('\n')
      : 'Aucun lieu trouv√© dans la base de donn√©es pour ces crit√®res.'

    // Ajouter l'enrichissement web si disponible
    const webInfo = webEnrichment ? `

INFORMATIONS WEB R√âCENTES :
${webEnrichment.summary}

Sources web consult√©es :
${webEnrichment.results.map((r: any) => `‚Ä¢ ${r.title} (${r.domain}): ${r.snippet.substring(0, 150)}...`).join('\n')}
` : ''

    return `CONTEXTE SYST√àME : Tu fais partie de Studio Evento, un √©cosyst√®me d'agents sp√©cialis√©s coordonn√©s par un orchestrateur central. Tu peux r√©f√©rencer les informations des autres modules (animations, budget, design) si pertinent pour tes recommandations de lieux.

Tu es un expert en √©v√©nementiel et en sourcing de lieux.  
√Ä partir des crit√®res ci-dessous, propose une **s√©lection de lieux adapt√©s** pour organiser l'√©v√©nement d√©crit, en donnant pour chaque lieu :
- Nom et description synth√©tique
- Localisation pr√©cise (adresse/ville/r√©gion/pays)
- Capacit√© d'accueil adapt√©e au format et au nombre de participants
- Avantages principaux et points distinctifs
- Points de vigilance ou limites √©ventuelles
- Format des espaces disponibles
- Estimation budg√©taire (si possible)
- Suggestions d'activit√©s ou d'ambiances en lien avec le lieu

Si possible, pr√©sente les lieux sous forme de tableau comparatif (si tu en proposes plusieurs), puis fais une recommandation personnalis√©e √† la fin.

Voici les crit√®res fournis par l'utilisateur :

- Type d'√©v√©nement : ${criteria.type_evenement || 'Non sp√©cifi√©'}
- Dates/dur√©e : ${criteria.dates || 'Non sp√©cifi√©es'}
- Nombre de participants : ${criteria.nb_participants || 'Non sp√©cifi√©'}
- Lieu/destination recherch√©e : ${criteria.lieu_recherche || 'Non sp√©cifi√©'}
- Profil des participants : ${criteria.profil_participants || 'Non sp√©cifi√©'}
- Budget disponible : ${criteria.budget || 'Non sp√©cifi√©'}
- Format(s) de salle(s) attendu(s) : ${criteria.format_salle || 'Non sp√©cifi√©'}
- Besoins techniques : ${criteria.besoins_techniques || 'Standard'}
- Accessibilit√© (transports, h√©bergement) : ${criteria.accessibilite || 'Non sp√©cifi√©e'}
- Contraintes sp√©cifiques : ${criteria.contraintes || 'Aucune'}
- Activit√©s attendues ou souhait√©es sur place : ${criteria.activites || 'Non sp√©cifi√©es'}
- Historique des √©v√©nements pr√©c√©dents ou lieux √† exclure : ${criteria.historique || 'Aucun'}
- Facteurs cl√©s de succ√®s : ${criteria.facteurs_cle_succes || 'Non sp√©cifi√©s'}

LIEUX DISPONIBLES DANS LA BASE DE DONN√âES:
${venuesText}

INSTRUCTIONS IMPORTANTES:
1. Base tes recommandations EXCLUSIVEMENT sur les lieux de la base de donn√©es fournie
2. Utilise un ton professionnel et clair, va √† l'essentiel pour aider √† la prise de d√©cision
3. Structure ta r√©ponse avec des tableaux comparatifs et une recommandation finale
4. Adapte chaque lieu aux crit√®res sp√©cifiques de l'√©v√©nement

DEMANDE ORIGINALE: "${originalMessage}"

R√©ponds en fran√ßais avec une approche consultative et professionnelle.`
  }

  private parseResponse(responseText: string, venues: any[], criteria: any): VenueResponse {
    const topVenues = venues.slice(0, 5).map((venue, index) => ({
      nom: venue.nom || `Lieu ${index + 1}`,
      capacite: venue.capacite || criteria.nb_participants?.toString() || 'Non sp√©cifi√©e',
      localite: venue.localite || venue.ville || criteria.lieu_recherche || 'Non sp√©cifi√©e',
      code_postal: venue.code_postal,
      score: 90 - (index * 5),
      advantages: [
        `Capacit√© adapt√©e (${venue.capacite || criteria.nb_participants} personnes)`,
        'Localisation id√©ale',
        '√âquipements modernes'
      ],
      considerations: ['V√©rifier disponibilit√©', 'Confirmer tarifs']
    }))

    return {
      recommendations: topVenues,
      analysis: responseText,
      searchCriteria: {
        capacity: criteria.nb_participants || 0,
        location: criteria.lieu_recherche || 'Non sp√©cifi√©e',
        eventType: criteria.type_evenement || 'Professionnel',
        budget: parseInt(criteria.budget?.replace(/[‚Ç¨\s]/g, '') || '0')
      },
      alternatives: [
        '√âlargir la recherche aux villes voisines',
        'Consid√©rer des lieux avec capacit√© modulable',
        'Explorer les options de location courte dur√©e'
      ]
    }
  }
}

export const venueAgent = new VenueAgent()

