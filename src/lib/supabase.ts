import { createClient } from '@supabase/supabase-js'

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY
const supabaseServiceRoleKey = process.env.SUPABASE_SERVICE_ROLE_KEY

// Client for client-side operations (with RLS)
export const supabase = supabaseUrl && supabaseAnonKey ? createClient(supabaseUrl, supabaseAnonKey) : null

// Admin client for server-side operations (bypasses RLS)
export const supabaseAdmin = supabaseUrl && supabaseServiceRoleKey ? createClient(supabaseUrl, supabaseServiceRoleKey, {
  auth: {
    autoRefreshToken: false,
    persistSession: false
  }
}) : null

// Database types (will be generated by Supabase CLI)
export type Database = {
  public: {
    Tables: {
      users: {
        Row: {
          id: string
          email: string
          name: string | null
          avatar: string | null
          created_at: string
          updated_at: string
        }
        Insert: {
          id?: string
          email: string
          name?: string | null
          avatar?: string | null
          created_at?: string
          updated_at?: string
        }
        Update: {
          id?: string
          email?: string
          name?: string | null
          avatar?: string | null
          created_at?: string
          updated_at?: string
        }
      }
      conversations: {
        Row: {
          id: string
          title: string | null
          status: 'ACTIVE' | 'PAUSED' | 'COMPLETED' | 'ARCHIVED'
          created_at: string
          updated_at: string
          user_id: string
          project_id: string | null
        }
        Insert: {
          id?: string
          title?: string | null
          status?: 'ACTIVE' | 'PAUSED' | 'COMPLETED' | 'ARCHIVED'
          created_at?: string
          updated_at?: string
          user_id: string
          project_id?: string | null
        }
        Update: {
          id?: string
          title?: string | null
          status?: 'ACTIVE' | 'PAUSED' | 'COMPLETED' | 'ARCHIVED'
          created_at?: string
          updated_at?: string
          user_id?: string
          project_id?: string | null
        }
      }
      messages: {
        Row: {
          id: string
          content: string
          role: 'USER' | 'ASSISTANT' | 'SYSTEM'
          agent_type: 'ORCHESTRATOR' | 'STORYTELLING' | 'RSE' | 'VENUE' | 'BRIEF_GENERATOR' | null
          model: string | null
          tokens: number | null
          latency: number | null
          created_at: string
          conversation_id: string
          context: any | null
          metadata: any | null
        }
        Insert: {
          id?: string
          content: string
          role: 'USER' | 'ASSISTANT' | 'SYSTEM'
          agent_type?: 'ORCHESTRATOR' | 'STORYTELLING' | 'RSE' | 'VENUE' | 'BRIEF_GENERATOR' | null
          model?: string | null
          tokens?: number | null
          latency?: number | null
          created_at?: string
          conversation_id: string
          context?: any | null
          metadata?: any | null
        }
        Update: {
          id?: string
          content?: string
          role?: 'USER' | 'ASSISTANT' | 'SYSTEM'
          agent_type?: 'ORCHESTRATOR' | 'STORYTELLING' | 'RSE' | 'VENUE' | 'BRIEF_GENERATOR' | null
          model?: string | null
          tokens?: number | null
          latency?: number | null
          created_at?: string
          conversation_id?: string
          context?: any | null
          metadata?: any | null
        }
      }
      projects: {
        Row: {
          id: string
          title: string
          description: string | null
          status: 'PLANNING' | 'IN_PROGRESS' | 'REVIEW' | 'COMPLETED' | 'CANCELLED'
          budget: number | null
          deadline: string | null
          venue: string | null
          attendees: number | null
          created_at: string
          updated_at: string
          user_id: string
          event_type: string | null
          requirements: any | null
          constraints: any | null
        }
        Insert: {
          id?: string
          title: string
          description?: string | null
          status?: 'PLANNING' | 'IN_PROGRESS' | 'REVIEW' | 'COMPLETED' | 'CANCELLED'
          budget?: number | null
          deadline?: string | null
          venue?: string | null
          attendees?: number | null
          created_at?: string
          updated_at?: string
          user_id: string
          event_type?: string | null
          requirements?: any | null
          constraints?: any | null
        }
        Update: {
          id?: string
          title?: string
          description?: string | null
          status?: 'PLANNING' | 'IN_PROGRESS' | 'REVIEW' | 'COMPLETED' | 'CANCELLED'
          budget?: number | null
          deadline?: string | null
          venue?: string | null
          attendees?: number | null
          created_at?: string
          updated_at?: string
          user_id?: string
          event_type?: string | null
          requirements?: any | null
          constraints?: any | null
        }
      }
      cache: {
        Row: {
          id: string
          key: string
          value: any
          embedding: string | null
          agent_type: 'ORCHESTRATOR' | 'STORYTELLING' | 'RSE' | 'VENUE' | 'BRIEF_GENERATOR'
          model: string
          expires_at: string
          created_at: string
          hit_count: number
          last_access: string
        }
        Insert: {
          id?: string
          key: string
          value: any
          embedding?: string | null
          agent_type: 'ORCHESTRATOR' | 'STORYTELLING' | 'RSE' | 'VENUE' | 'BRIEF_GENERATOR'
          model: string
          expires_at: string
          created_at?: string
          hit_count?: number
          last_access?: string
        }
        Update: {
          id?: string
          key?: string
          value?: any
          embedding?: string | null
          agent_type?: 'ORCHESTRATOR' | 'STORYTELLING' | 'RSE' | 'VENUE' | 'BRIEF_GENERATOR'
          model?: string
          expires_at?: string
          created_at?: string
          hit_count?: number
          last_access?: string
        }
      }
      analytics: {
        Row: {
          id: string
          event_type: string
          agent_type: 'ORCHESTRATOR' | 'STORYTELLING' | 'RSE' | 'VENUE' | 'BRIEF_GENERATOR' | null
          model: string | null
          user_id: string | null
          data: any
          created_at: string
        }
        Insert: {
          id?: string
          event_type: string
          agent_type?: 'ORCHESTRATOR' | 'STORYTELLING' | 'RSE' | 'VENUE' | 'BRIEF_GENERATOR' | null
          model?: string | null
          user_id?: string | null
          data: any
          created_at?: string
        }
        Update: {
          id?: string
          event_type?: string
          agent_type?: 'ORCHESTRATOR' | 'STORYTELLING' | 'RSE' | 'VENUE' | 'BRIEF_GENERATOR' | null
          model?: string | null
          user_id?: string | null
          data?: any
          created_at?: string
        }
      }
    }
    Views: {
      [_ in never]: never
    }
    Functions: {
      [_ in never]: never
    }
    Enums: {
      [_ in never]: never
    }
  }
}

// Interface pour les prompts des agents
export interface AgentPrompt {
  id: string
  agent_name: string
  agent_type: string
  model: string
  temperature: number
  max_tokens: number
  system_prompt: string
  description?: string
  is_active: boolean
  created_at: string
  updated_at: string
  updated_by?: string
}

export default supabase